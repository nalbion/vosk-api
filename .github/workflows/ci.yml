name: CI

on:
  push:
    branches: [ master, win-build ]
  pull_request:
    branches: [ master ]

env:
  KALDI_ROOT: kaldi

jobs:
  windows:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout kaldi repo
        uses: actions/checkout@v2
        with:
          repository: kaldi-asr/kaldi
          path: kaldi

      - name: Checkout OpenFST repo
        uses: actions/checkout@v2
        with:
#          repository: kkm000/openfst
#          ref: winport
          repository: markus-franke/openfst
          ref: FixUnitTestBuildWithCMake
          path: openfst

      - name: Compile PortAudio
        # https://git.assembla.com/portaudio.git
        run: |
          curl -L -O http://www.portaudio.com/archives/pa_stable_v190600_20161030.tgz
          unzip pa_stable_v190600_20161030.tgz
          dir
          cd portaudio
          cmake
          make

      - name: Compile OpenFST
        working-directory: openfst
        run: |
          mkdir build64
          cd build64
          cmake ..
          dir
          make

      - name: Prepare Kaldi
        working-directory: kaldi/tools
        run: |
          curl -L -O http://sourceforge.net/projects/openblas/files/v0.2.14/OpenBLAS-v0.2.14-Win64-int32.zip
          curl -L -O http://sourceforge.net/projects/openblas/files/v0.2.14/mingw64_dll.zip
          unzip OpenBLAS-v0.2.14-Win64-int32.zip
          unzip mingw64_dll.zip

      - name: Configure Kaldi
        working-directory: kaldi/windows
        shell: powershell
#        run: (gc variables.props.dev) -replace 'foo', 'bar' | Out-File -encoding ASCII variables.props
        run: |
          (Get-Content 'variables.props.dev') | Foreach-Object {
            $_ -replace '(<OPENBLASDIR>).*(</OPENBLASDIR>)', '${1}OpenBLAS-v0.2.14-Win64-int32${2}' `
            -replace '(<OPENFST>).*(</OPENFST>)', '${1}..\openfst${2}' `
            -replace '(<OPENFSTLIB>).*(</OPENFSTLIB>)', '${1}..\openfst\build64${2}' `
            -replace '(<PORTAUDIO>).*(</PORTAUDIO>)', '${1}..\openfst${2}' `
            -replace '(<PORTAUDIOLIB>).*(</PORTAUDIOLIB>)', '${1}..\portaudio${2}'
          } | Set-Content 'variables.props'
#            -replace '(<NVTOOLSDIR>).*(</NVTOOLSDIR>)', '${1}..\openfst${2}'

      - name: Compile Kaldi
        working-directory: kaldi/windows
        shell: powershell
        run: |
          generate_solution.pl --vsver <default|vs2017|vs2015> --enable-openblas
          get_version.pl
          dir

  #      - name: configure
#        run: mkdir build && cd build && cmake ..
#      - name: build
#        run: cmake --build build --config Debug

  java:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout kaldi repo
        uses: actions/checkout@v2
        with:
          repository: kaldi-asr/kaldi
          path: kaldi

      - name: Compile Kaldi
        working-directory: kaldi/tools
        run: |
          sudo apt-get install -y sox gfortran
          extras/install_mkl.sh
          extras/install_openblas.sh
          extras/check_dependencies.sh
          make
          cd ../src
          ./configure --mathlib=OPENBLAS --shared --use-cuda=no
          make depend -j 8
          make -j 8

#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.x'
#
#      - name: Build Python module
#        working-directory: python
#        run: python3 setup.py install --user --single-version-externally-managed --root=/

      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: 8
#          settings-path: ${{ github.workspace }}

      - name: Build Java library
        working-directory: java
        run: |
          sudo apt-get install -y swig
          make
          mvn package

      - name: List artifacts
        working-directory: java
        run: |
          ls -al
          ls -al src/main/java/
          ls -al target

      - name: Archive jni library
        uses: actions/upload-artifact@v1
        with:
          name: libvosk_jni.so
          path: libvosk_jni.so

      - name: Archive jar
        uses: actions/upload-artifact@v1
        with:
          name: vosk.jar
          path: target/vosk*.jar

#TODO: also deploy .so & .dll
      - name: Publish to GitHub Packages Apache Maven
        run: mvn deploy
        #-s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ github.token }}