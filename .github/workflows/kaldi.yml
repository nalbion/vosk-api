name: Kaldi

# This build takes over an hour to run, so it only runs when this file is modified.
# To build a new Kaldi release, update KALDI_REF below.

env:
#  KALDI_REF: '5.0'
  KALDI_REF: master
#  KALDI_VERSION:

on:
  push:
    paths:
      - '.github/workflows/kaldi.yml'
    branches:
      - master
#  schedule:
#    - cron: '0 0 * * *'

jobs:
  windows:
    runs-on: windows-latest

    steps:
      - name: Checkout kaldi repo
        uses: actions/checkout@v2
        with:
          repository: kaldi-asr/kaldi
          ref: ${{ env.KALDI_REF }}
          path: kaldi

      - name: Checkout OpenFST repo
        uses: actions/checkout@v2
        with:
          repository: kkm000/openfst
          ref: winport
          path: openfst

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.0

      - name: Compile OpenFST
        working-directory: openfst
        # cmake --build build64 --config Release|x64
        # msbuild /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
        run: |
          mkdir build64 && cd build64 && cmake ..
          msbuild openfst.sln /p:Configuration=Release
        env:
          Appx_Bundle: Always
          Appx_Bundle_Platforms: x86|x64
          Appx_Package_Build_Mode: StoreUpload

      - run: dir
        working-directory: openfst/build64/x64

      # TODO: right click portaudio_static->Properties->C/C++->Code Generation->Runtime Library Change from Multi-Threaded Debug (/MTd) to Multi-threaded Debug DLL (/MDd)
      # Builds portaudio\build64\Debug\portaudio_x64.dll
      - name: Compile PortAudio
        # https://git.assembla.com/portaudio.git
        #cmake --build build64 --config Release|x64
        run: |
          curl -L -O http://www.portaudio.com/archives/pa_stable_v190600_20161030.tgz
          tar xzvf pa_stable_v190600_20161030.tgz
          cd portaudio
          cmake
          msbuild portaudio.sln /p:Configuration=Release
          dir

      - name: Prepare Kaldi
        working-directory: kaldi/tools
        run: |
          curl -L -O http://sourceforge.net/projects/openblas/files/v0.2.14/OpenBLAS-v0.2.14-Win64-int32.zip
          curl -L -O http://sourceforge.net/projects/openblas/files/v0.2.14/mingw64_dll.zip
          unzip OpenBLAS-v0.2.14-Win64-int32.zip
          unzip mingw64_dll.zip

      - name: Configure Kaldi
        working-directory: kaldi/windows
        shell: powershell
        #        run: (gc variables.props.dev) -replace 'foo', 'bar' | Out-File -encoding ASCII variables.props
        run: |
          (Get-Content 'variables.props.dev') | Foreach-Object {
            $_ -replace '(<OPENBLASDIR>).*(</OPENBLASDIR>)', '${1}OpenBLAS-v0.2.14-Win64-int32${2}' `
            -replace '(<OPENFST>).*(</OPENFST>)', '${1}..\openfst${2}' `
            -replace '(<OPENFSTLIB>).*(</OPENFSTLIB>)', '${1}..\openfst\build64${2}' `
            -replace '(<PORTAUDIO>).*(</PORTAUDIO>)', '${1}..\openfst${2}' `
            -replace '(<PORTAUDIOLIB>).*(</PORTAUDIOLIB>)', '${1}..\portaudio${2}'
          } | Set-Content 'variables.props'
      #            -replace '(<NVTOOLSDIR>).*(</NVTOOLSDIR>)', '${1}..\openfst${2}'

      - name: Compile Kaldi
        working-directory: kaldi/windows
        run: |
          ./generate_solution.pl --enable-openblas
          ./get_version.pl
          dir

  linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout kaldi repo
        uses: actions/checkout@v2
        with:
          repository: kaldi-asr/kaldi
          ref: ${{ env.KALDI_REF }}
          path: kaldi

      - name: Kaldi Commit
        if: ${{ env.KALDI_REF == 'master' }}
        working-directory: kaldi
        run: echo ::set-env name=KALDI_VERSION::$(git rev-parse --short HEAD)
#        run: echo ::set-output name=short::$(git rev-parse --short HEAD)
        # ${steps.kaldi-commit.outputs.short}

      - name: Kaldi Version
        if: ${{ env.KALDI_REF != 'master' }}
        run: echo ::set-env name=KALDI_VERSION::${{ env.KALDI_REF }}

      - name: Compile Kaldi
        working-directory: kaldi/tools
        # extras/install_mkl.sh
#        find -name '*.a' -printf '%P\0' | tar --null --files-from=- -cf 'kaldi-libs.tgz'
        run: |
          sudo apt-get install -y sox gfortran zlib1g-dev libtool
          ./extras/install_openblas.sh
          ./extras/check_dependencies.sh
          make
          cd ../src
          ./configure --mathlib=OPENBLAS --shared --use-cuda=no
          make -j depend; make -j 8
          cd ..
          find -regex ".*/kaldi-.*\.a" -not -regex ".*-\(chain\|kws\|nnet\|nnet2\|rnnlm\|sgmm2\).a" -print | zip kaldi-linux -@
          zip kaldi-linux tools/openfst/lib/libfst.a tools/openfst/lib/libfstngram.a tools/OpenBLAS/libopenblas.a

      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: 8

      - name: Deploy kaldi-linux.zip
        working-directory: kaldi
        run: |
          mvn deploy:deploy-file \
            -DgroupId=kaldi-asr -DartifactId=kaldi-linux -Dversion=${{ env.KALDI_VERSION }} \
            -DrepositoryId=github \
            -DrepoUrl=https://maven.pkg.github.com/${{ GITHUB_REPOSITORY }} \
            -Dpackaging=zip -Dfile=kaldi-linux.zip \

#            -Durl=

        # The artifacts are only available for 90 days, and don't seem to work between workflows
#      - name: Save kaldi-linux.zip
#        uses: actions/upload-artifact@v2
#        with:
#          name: kaldi-linux-${{ env.KALDI_VERSION }}
#          path: kaldi/kaldi-linux.zip
